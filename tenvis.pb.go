// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tenvis.proto

package tenvis

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SCPMessage_Type int32

const (
	SCPMessage_UNKNOWN         SCPMessage_Type = 0
	SCPMessage_VOTE_NOMINATE   SCPMessage_Type = 1
	SCPMessage_ACCEPT_NOMINATE SCPMessage_Type = 2
	SCPMessage_VOTE_PREPARE    SCPMessage_Type = 3
	SCPMessage_ACCEPT_PREPARE  SCPMessage_Type = 4
	SCPMessage_VOTE_COMMIT     SCPMessage_Type = 5
	SCPMessage_ACCEPT_COMMIT   SCPMessage_Type = 6
)

var SCPMessage_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "VOTE_NOMINATE",
	2: "ACCEPT_NOMINATE",
	3: "VOTE_PREPARE",
	4: "ACCEPT_PREPARE",
	5: "VOTE_COMMIT",
	6: "ACCEPT_COMMIT",
}

var SCPMessage_Type_value = map[string]int32{
	"UNKNOWN":         0,
	"VOTE_NOMINATE":   1,
	"ACCEPT_NOMINATE": 2,
	"VOTE_PREPARE":    3,
	"ACCEPT_PREPARE":  4,
	"VOTE_COMMIT":     5,
	"ACCEPT_COMMIT":   6,
}

func (x SCPMessage_Type) String() string {
	return proto.EnumName(SCPMessage_Type_name, int32(x))
}

func (SCPMessage_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{2, 0}
}

type GetVotingRequest struct {
	Id                   uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVotingRequest) Reset()         { *m = GetVotingRequest{} }
func (m *GetVotingRequest) String() string { return proto.CompactTextString(m) }
func (*GetVotingRequest) ProtoMessage()    {}
func (*GetVotingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{0}
}

func (m *GetVotingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVotingRequest.Unmarshal(m, b)
}
func (m *GetVotingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVotingRequest.Marshal(b, m, deterministic)
}
func (m *GetVotingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVotingRequest.Merge(m, src)
}
func (m *GetVotingRequest) XXX_Size() int {
	return xxx_messageInfo_GetVotingRequest.Size(m)
}
func (m *GetVotingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVotingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVotingRequest proto.InternalMessageInfo

func (m *GetVotingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetLedgerRequest struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetLedgerRequest) Reset()         { *m = GetLedgerRequest{} }
func (m *GetLedgerRequest) String() string { return proto.CompactTextString(m) }
func (*GetLedgerRequest) ProtoMessage()    {}
func (*GetLedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{1}
}

func (m *GetLedgerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLedgerRequest.Unmarshal(m, b)
}
func (m *GetLedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLedgerRequest.Marshal(b, m, deterministic)
}
func (m *GetLedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLedgerRequest.Merge(m, src)
}
func (m *GetLedgerRequest) XXX_Size() int {
	return xxx_messageInfo_GetLedgerRequest.Size(m)
}
func (m *GetLedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLedgerRequest proto.InternalMessageInfo

func (m *GetLedgerRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type SCPMessage struct {
	Type                 SCPMessage_Type `protobuf:"varint,1,opt,name=type,proto3,enum=tenvis.SCPMessage_Type" json:"type,omitempty"`
	SlotIndex            uint64          `protobuf:"varint,2,opt,name=slot_index,json=slotIndex,proto3" json:"slot_index,omitempty"`
	Counter              uint32          `protobuf:"varint,3,opt,name=counter,proto3" json:"counter,omitempty"`
	Value                []byte          `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SCPMessage) Reset()         { *m = SCPMessage{} }
func (m *SCPMessage) String() string { return proto.CompactTextString(m) }
func (*SCPMessage) ProtoMessage()    {}
func (*SCPMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{2}
}

func (m *SCPMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCPMessage.Unmarshal(m, b)
}
func (m *SCPMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCPMessage.Marshal(b, m, deterministic)
}
func (m *SCPMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPMessage.Merge(m, src)
}
func (m *SCPMessage) XXX_Size() int {
	return xxx_messageInfo_SCPMessage.Size(m)
}
func (m *SCPMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SCPMessage proto.InternalMessageInfo

func (m *SCPMessage) GetType() SCPMessage_Type {
	if m != nil {
		return m.Type
	}
	return SCPMessage_UNKNOWN
}

func (m *SCPMessage) GetSlotIndex() uint64 {
	if m != nil {
		return m.SlotIndex
	}
	return 0
}

func (m *SCPMessage) GetCounter() uint32 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *SCPMessage) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type SCPMessages struct {
	List                 []*SCPMessage `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Signature            []byte        `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SCPMessages) Reset()         { *m = SCPMessages{} }
func (m *SCPMessages) String() string { return proto.CompactTextString(m) }
func (*SCPMessages) ProtoMessage()    {}
func (*SCPMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{3}
}

func (m *SCPMessages) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SCPMessages.Unmarshal(m, b)
}
func (m *SCPMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SCPMessages.Marshal(b, m, deterministic)
}
func (m *SCPMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPMessages.Merge(m, src)
}
func (m *SCPMessages) XXX_Size() int {
	return xxx_messageInfo_SCPMessages.Size(m)
}
func (m *SCPMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPMessages.DiscardUnknown(m)
}

var xxx_messageInfo_SCPMessages proto.InternalMessageInfo

func (m *SCPMessages) GetList() []*SCPMessage {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *SCPMessages) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Ledger struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ledger) Reset()         { *m = Ledger{} }
func (m *Ledger) String() string { return proto.CompactTextString(m) }
func (*Ledger) ProtoMessage()    {}
func (*Ledger) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{4}
}

func (m *Ledger) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ledger.Unmarshal(m, b)
}
func (m *Ledger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ledger.Marshal(b, m, deterministic)
}
func (m *Ledger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ledger.Merge(m, src)
}
func (m *Ledger) XXX_Size() int {
	return xxx_messageInfo_Ledger.Size(m)
}
func (m *Ledger) XXX_DiscardUnknown() {
	xxx_messageInfo_Ledger.DiscardUnknown(m)
}

var xxx_messageInfo_Ledger proto.InternalMessageInfo

func (m *Ledger) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Ledger) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type LedgerMessage struct {
	Ledger               *Ledger  `protobuf:"bytes,1,opt,name=ledger,proto3" json:"ledger,omitempty"`
	Signature            []byte   `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LedgerMessage) Reset()         { *m = LedgerMessage{} }
func (m *LedgerMessage) String() string { return proto.CompactTextString(m) }
func (*LedgerMessage) ProtoMessage()    {}
func (*LedgerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{5}
}

func (m *LedgerMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LedgerMessage.Unmarshal(m, b)
}
func (m *LedgerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LedgerMessage.Marshal(b, m, deterministic)
}
func (m *LedgerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerMessage.Merge(m, src)
}
func (m *LedgerMessage) XXX_Size() int {
	return xxx_messageInfo_LedgerMessage.Size(m)
}
func (m *LedgerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerMessage proto.InternalMessageInfo

func (m *LedgerMessage) GetLedger() *Ledger {
	if m != nil {
		return m.Ledger
	}
	return nil
}

func (m *LedgerMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type TenvisOperations struct {
	CreateVoting         []*CreateVotingOperation `protobuf:"bytes,2,rep,name=create_voting,json=createVoting,proto3" json:"create_voting,omitempty"`
	Vote                 []*VoteOperation         `protobuf:"bytes,3,rep,name=vote,proto3" json:"vote,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *TenvisOperations) Reset()         { *m = TenvisOperations{} }
func (m *TenvisOperations) String() string { return proto.CompactTextString(m) }
func (*TenvisOperations) ProtoMessage()    {}
func (*TenvisOperations) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{6}
}

func (m *TenvisOperations) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TenvisOperations.Unmarshal(m, b)
}
func (m *TenvisOperations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TenvisOperations.Marshal(b, m, deterministic)
}
func (m *TenvisOperations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenvisOperations.Merge(m, src)
}
func (m *TenvisOperations) XXX_Size() int {
	return xxx_messageInfo_TenvisOperations.Size(m)
}
func (m *TenvisOperations) XXX_DiscardUnknown() {
	xxx_messageInfo_TenvisOperations.DiscardUnknown(m)
}

var xxx_messageInfo_TenvisOperations proto.InternalMessageInfo

func (m *TenvisOperations) GetCreateVoting() []*CreateVotingOperation {
	if m != nil {
		return m.CreateVoting
	}
	return nil
}

func (m *TenvisOperations) GetVote() []*VoteOperation {
	if m != nil {
		return m.Vote
	}
	return nil
}

type CreateVotingOperation struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Organizer            string   `protobuf:"bytes,2,opt,name=organizer,proto3" json:"organizer,omitempty"`
	Participants         []string `protobuf:"bytes,3,rep,name=participants,proto3" json:"participants,omitempty"`
	Options              []string `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	Signature            []byte   `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateVotingOperation) Reset()         { *m = CreateVotingOperation{} }
func (m *CreateVotingOperation) String() string { return proto.CompactTextString(m) }
func (*CreateVotingOperation) ProtoMessage()    {}
func (*CreateVotingOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{7}
}

func (m *CreateVotingOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateVotingOperation.Unmarshal(m, b)
}
func (m *CreateVotingOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateVotingOperation.Marshal(b, m, deterministic)
}
func (m *CreateVotingOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateVotingOperation.Merge(m, src)
}
func (m *CreateVotingOperation) XXX_Size() int {
	return xxx_messageInfo_CreateVotingOperation.Size(m)
}
func (m *CreateVotingOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateVotingOperation.DiscardUnknown(m)
}

var xxx_messageInfo_CreateVotingOperation proto.InternalMessageInfo

func (m *CreateVotingOperation) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateVotingOperation) GetOrganizer() string {
	if m != nil {
		return m.Organizer
	}
	return ""
}

func (m *CreateVotingOperation) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *CreateVotingOperation) GetOptions() []string {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *CreateVotingOperation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type VoteOperation struct {
	ParticipantId        string   `protobuf:"bytes,1,opt,name=participant_id,json=participantId,proto3" json:"participant_id,omitempty"`
	VotingId             uint64   `protobuf:"varint,2,opt,name=voting_id,json=votingId,proto3" json:"voting_id,omitempty"`
	Option               string   `protobuf:"bytes,3,opt,name=option,proto3" json:"option,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VoteOperation) Reset()         { *m = VoteOperation{} }
func (m *VoteOperation) String() string { return proto.CompactTextString(m) }
func (*VoteOperation) ProtoMessage()    {}
func (*VoteOperation) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{8}
}

func (m *VoteOperation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VoteOperation.Unmarshal(m, b)
}
func (m *VoteOperation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VoteOperation.Marshal(b, m, deterministic)
}
func (m *VoteOperation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteOperation.Merge(m, src)
}
func (m *VoteOperation) XXX_Size() int {
	return xxx_messageInfo_VoteOperation.Size(m)
}
func (m *VoteOperation) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteOperation.DiscardUnknown(m)
}

var xxx_messageInfo_VoteOperation proto.InternalMessageInfo

func (m *VoteOperation) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

func (m *VoteOperation) GetVotingId() uint64 {
	if m != nil {
		return m.VotingId
	}
	return 0
}

func (m *VoteOperation) GetOption() string {
	if m != nil {
		return m.Option
	}
	return ""
}

func (m *VoteOperation) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Voting struct {
	Id                   uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string            `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Organizer            string            `protobuf:"bytes,3,opt,name=organizer,proto3" json:"organizer,omitempty"`
	Participants         []string          `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
	Voted                []string          `protobuf:"bytes,5,rep,name=voted,proto3" json:"voted,omitempty"`
	Options              map[string]uint32 `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Result               string            `protobuf:"bytes,7,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Voting) Reset()         { *m = Voting{} }
func (m *Voting) String() string { return proto.CompactTextString(m) }
func (*Voting) ProtoMessage()    {}
func (*Voting) Descriptor() ([]byte, []int) {
	return fileDescriptor_dfa8cb0daccce723, []int{9}
}

func (m *Voting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Voting.Unmarshal(m, b)
}
func (m *Voting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Voting.Marshal(b, m, deterministic)
}
func (m *Voting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Voting.Merge(m, src)
}
func (m *Voting) XXX_Size() int {
	return xxx_messageInfo_Voting.Size(m)
}
func (m *Voting) XXX_DiscardUnknown() {
	xxx_messageInfo_Voting.DiscardUnknown(m)
}

var xxx_messageInfo_Voting proto.InternalMessageInfo

func (m *Voting) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Voting) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Voting) GetOrganizer() string {
	if m != nil {
		return m.Organizer
	}
	return ""
}

func (m *Voting) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *Voting) GetVoted() []string {
	if m != nil {
		return m.Voted
	}
	return nil
}

func (m *Voting) GetOptions() map[string]uint32 {
	if m != nil {
		return m.Options
	}
	return nil
}

func (m *Voting) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterEnum("tenvis.SCPMessage_Type", SCPMessage_Type_name, SCPMessage_Type_value)
	proto.RegisterType((*GetVotingRequest)(nil), "tenvis.GetVotingRequest")
	proto.RegisterType((*GetLedgerRequest)(nil), "tenvis.GetLedgerRequest")
	proto.RegisterType((*SCPMessage)(nil), "tenvis.SCPMessage")
	proto.RegisterType((*SCPMessages)(nil), "tenvis.SCPMessages")
	proto.RegisterType((*Ledger)(nil), "tenvis.Ledger")
	proto.RegisterType((*LedgerMessage)(nil), "tenvis.LedgerMessage")
	proto.RegisterType((*TenvisOperations)(nil), "tenvis.TenvisOperations")
	proto.RegisterType((*CreateVotingOperation)(nil), "tenvis.CreateVotingOperation")
	proto.RegisterType((*VoteOperation)(nil), "tenvis.VoteOperation")
	proto.RegisterType((*Voting)(nil), "tenvis.Voting")
	proto.RegisterMapType((map[string]uint32)(nil), "tenvis.Voting.OptionsEntry")
}

func init() { proto.RegisterFile("tenvis.proto", fileDescriptor_dfa8cb0daccce723) }

var fileDescriptor_dfa8cb0daccce723 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xdd, 0x6e, 0xd3, 0x4c,
	0x10, 0xfd, 0xec, 0x38, 0x4e, 0x3d, 0xb1, 0x53, 0x77, 0xfb, 0xa5, 0xb5, 0x52, 0x2a, 0x45, 0x96,
	0xa8, 0x82, 0x90, 0x12, 0x14, 0x40, 0x42, 0x55, 0x6f, 0xda, 0x28, 0x42, 0x11, 0xcd, 0x8f, 0xdc,
	0xb4, 0x5c, 0x46, 0x6e, 0xbc, 0x58, 0x16, 0xa9, 0x6d, 0xec, 0x4d, 0x44, 0x40, 0x5c, 0x80, 0xc4,
	0x05, 0x77, 0x20, 0x1e, 0x82, 0x07, 0xe2, 0x15, 0x90, 0x78, 0x0d, 0xe4, 0x5d, 0xbb, 0xb6, 0x93,
	0x40, 0xaf, 0x92, 0x39, 0x7b, 0x66, 0xbc, 0x73, 0x66, 0xce, 0x82, 0x4c, 0xb0, 0xbb, 0x70, 0xc2,
	0xa6, 0x1f, 0x78, 0xc4, 0x43, 0x22, 0x8b, 0x6a, 0x07, 0xb6, 0xe7, 0xd9, 0x33, 0xdc, 0xa2, 0xe8,
	0xf5, 0xfc, 0x55, 0x0b, 0xdf, 0xf8, 0x64, 0xc9, 0x48, 0xb5, 0x7d, 0xfa, 0xd3, 0x32, 0x5d, 0xd7,
	0x23, 0x26, 0x71, 0x3c, 0x37, 0xce, 0xd6, 0x75, 0x50, 0x9f, 0x63, 0x72, 0xe5, 0x11, 0xc7, 0xb5,
	0x0d, 0xfc, 0x66, 0x8e, 0x43, 0x82, 0x2a, 0xc0, 0x3b, 0x96, 0xc6, 0xd5, 0xb9, 0x86, 0x60, 0xf0,
	0x8e, 0xa5, 0x37, 0x28, 0xe7, 0x1c, 0x5b, 0x36, 0x0e, 0x12, 0xce, 0xff, 0x50, 0x74, 0x5c, 0x0b,
	0xbf, 0x8d, 0x69, 0x2c, 0xd0, 0xbf, 0xf2, 0x00, 0x17, 0x9d, 0x51, 0x1f, 0x87, 0xa1, 0x69, 0x63,
	0xf4, 0x10, 0x04, 0xb2, 0xf4, 0x31, 0xe5, 0x54, 0xda, 0xfb, 0xcd, 0xf8, 0xde, 0x29, 0xa3, 0x39,
	0x5e, 0xfa, 0xd8, 0xa0, 0x24, 0x74, 0x08, 0x10, 0xce, 0x3c, 0x32, 0x61, 0x65, 0x79, 0x5a, 0x56,
	0x8a, 0x90, 0x5e, 0x04, 0x20, 0x0d, 0x4a, 0x53, 0x6f, 0xee, 0x12, 0x1c, 0x68, 0x85, 0x3a, 0xd7,
	0x50, 0x8c, 0x24, 0x8c, 0xae, 0xb2, 0x30, 0x67, 0x73, 0xac, 0x09, 0x75, 0xae, 0x21, 0x1b, 0x2c,
	0xd0, 0x3f, 0x73, 0x20, 0x44, 0xd5, 0x51, 0x19, 0x4a, 0x97, 0x83, 0x17, 0x83, 0xe1, 0xcb, 0x81,
	0xfa, 0x1f, 0xda, 0x01, 0xe5, 0x6a, 0x38, 0xee, 0x4e, 0x06, 0xc3, 0x7e, 0x6f, 0x70, 0x3a, 0xee,
	0xaa, 0x1c, 0xda, 0x85, 0xed, 0xd3, 0x4e, 0xa7, 0x3b, 0x1a, 0xa7, 0x20, 0x8f, 0x54, 0x90, 0x29,
	0x6f, 0x64, 0x74, 0x47, 0xa7, 0x46, 0x57, 0x2d, 0x20, 0x04, 0x95, 0x98, 0x96, 0x60, 0x02, 0xda,
	0x86, 0x32, 0x65, 0x75, 0x86, 0xfd, 0x7e, 0x6f, 0xac, 0x16, 0xa3, 0xf2, 0x31, 0x29, 0x86, 0x44,
	0xfd, 0x02, 0xca, 0x69, 0xbf, 0x21, 0x3a, 0x02, 0x61, 0xe6, 0x84, 0x44, 0xe3, 0xea, 0x85, 0x46,
	0xb9, 0x8d, 0xd6, 0x25, 0x31, 0xe8, 0x39, 0xba, 0x07, 0x52, 0xe8, 0xd8, 0xae, 0x49, 0xe6, 0x01,
	0xa6, 0x62, 0xc8, 0x46, 0x0a, 0xe8, 0x4f, 0x40, 0x64, 0xe3, 0xd8, 0x3c, 0x87, 0x54, 0x12, 0x3e,
	0x2b, 0xc9, 0x25, 0x28, 0x2c, 0x2b, 0x99, 0xcf, 0x11, 0x88, 0x33, 0x0a, 0xd0, 0xec, 0x72, 0xbb,
	0x92, 0x5c, 0x27, 0x9e, 0x75, 0x7c, 0x7a, 0xc7, 0x65, 0x3e, 0x72, 0xa0, 0x8e, 0x69, 0xde, 0xd0,
	0xc7, 0x01, 0xdb, 0x2e, 0x74, 0x06, 0xca, 0x34, 0xc0, 0x26, 0xc1, 0x93, 0x05, 0xdd, 0x2d, 0x8d,
	0xa7, 0x0d, 0x1f, 0x26, 0x5f, 0xe8, 0xd0, 0x43, 0xb6, 0x77, 0xb7, 0x69, 0x86, 0x3c, 0xcd, 0xc0,
	0xe8, 0x01, 0x08, 0x0b, 0x8f, 0x60, 0xad, 0x40, 0x53, 0xab, 0x49, 0xea, 0x95, 0x47, 0x70, 0x9a,
	0x42, 0x29, 0xfa, 0x0f, 0x0e, 0xaa, 0x1b, 0x4b, 0x46, 0x52, 0x10, 0x87, 0xcc, 0xd8, 0x12, 0x4a,
	0x06, 0x0b, 0xa2, 0x8e, 0xbc, 0xc0, 0x36, 0x5d, 0xe7, 0x1d, 0x0e, 0x68, 0x47, 0x92, 0x91, 0x02,
	0x48, 0x07, 0xd9, 0x37, 0x03, 0xe2, 0x4c, 0x1d, 0xdf, 0x74, 0x49, 0x48, 0x2f, 0x20, 0x19, 0x39,
	0x2c, 0xda, 0x47, 0xcf, 0xa7, 0xbd, 0x6a, 0x02, 0x3d, 0x4e, 0xc2, 0xbc, 0x5a, 0xc5, 0x55, 0xb5,
	0xbe, 0x70, 0xa0, 0xe4, 0x3a, 0x40, 0xf7, 0xa1, 0x92, 0xa9, 0x3c, 0x89, 0xad, 0x27, 0x19, 0x4a,
	0x06, 0xed, 0x59, 0xe8, 0x00, 0x24, 0x26, 0x65, 0xc4, 0x60, 0xf6, 0xd8, 0x62, 0x40, 0xcf, 0x42,
	0x7b, 0x20, 0xb2, 0xcf, 0x53, 0x73, 0x48, 0x46, 0x1c, 0xe5, 0xef, 0x22, 0xac, 0xde, 0xe5, 0x1b,
	0x0f, 0x62, 0xac, 0xf5, 0x8a, 0xe7, 0x53, 0xd9, 0xf8, 0xbf, 0xca, 0x56, 0xb8, 0x4b, 0x36, 0x61,
	0x83, 0x6c, 0xd1, 0x66, 0x7a, 0x04, 0x5b, 0x5a, 0x91, 0x1e, 0xb2, 0x00, 0x3d, 0x4d, 0xc5, 0x14,
	0xe9, 0xb0, 0x0f, 0x32, 0xc3, 0x76, 0x5c, 0xbb, 0x39, 0x64, 0xa7, 0x5d, 0x97, 0x04, 0xcb, 0x54,
	0xe9, 0x3d, 0x10, 0x03, 0x1c, 0xce, 0x67, 0x44, 0x2b, 0xb1, 0xae, 0x59, 0x54, 0x3b, 0x06, 0x39,
	0x9b, 0x80, 0x54, 0x28, 0xbc, 0xc6, 0xcb, 0x58, 0xd6, 0xe8, 0x6f, 0xde, 0x20, 0x4a, 0x6c, 0x90,
	0x63, 0xfe, 0x19, 0xd7, 0xfe, 0xcd, 0x83, 0xc8, 0xb6, 0x19, 0x9d, 0xc1, 0xce, 0x05, 0x09, 0xb0,
	0x79, 0x93, 0x35, 0xf0, 0x5e, 0x93, 0xbd, 0xb3, 0xcd, 0xe4, 0x9d, 0x6d, 0x76, 0xa3, 0x77, 0xb6,
	0xb6, 0xbb, 0x6e, 0xe5, 0xf0, 0x11, 0x87, 0x4e, 0x40, 0xba, 0x7d, 0x3b, 0x91, 0x96, 0x70, 0x56,
	0x9f, 0xd3, 0x5a, 0x35, 0xef, 0xbc, 0xc4, 0xa0, 0xe7, 0x34, 0x3b, 0x1e, 0x51, 0x36, 0x3b, 0xf7,
	0x60, 0xd7, 0x2a, 0x79, 0xb5, 0xf4, 0xea, 0xa7, 0x9f, 0xbf, 0xbe, 0xf3, 0xdb, 0x48, 0x69, 0xb1,
	0x05, 0x09, 0x5b, 0xef, 0x1d, 0xeb, 0x03, 0x1a, 0x82, 0x9c, 0xf5, 0x08, 0xfa, 0xb7, 0x19, 0xd7,
	0xaa, 0xaa, 0xb4, 0x2a, 0xe8, 0x5b, 0x49, 0x55, 0x74, 0x02, 0x42, 0xb4, 0xca, 0x68, 0xb3, 0x35,
	0xd7, 0x0a, 0x28, 0xb4, 0x40, 0x49, 0x2f, 0x46, 0x05, 0xf0, 0xb5, 0x48, 0x15, 0x7c, 0xfc, 0x27,
	0x00, 0x00, 0xff, 0xff, 0x1a, 0x93, 0xb3, 0xdb, 0xcf, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TenvisClient is the client API for Tenvis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TenvisClient interface {
	StreamSCPMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Tenvis_StreamSCPMessagesClient, error)
	GetLedger(ctx context.Context, in *GetLedgerRequest, opts ...grpc.CallOption) (*LedgerMessage, error)
	GetVoting(ctx context.Context, in *GetVotingRequest, opts ...grpc.CallOption) (*Voting, error)
	CreateVoting(ctx context.Context, in *CreateVotingOperation, opts ...grpc.CallOption) (*Voting, error)
	Vote(ctx context.Context, in *VoteOperation, opts ...grpc.CallOption) (*Voting, error)
}

type tenvisClient struct {
	cc *grpc.ClientConn
}

func NewTenvisClient(cc *grpc.ClientConn) TenvisClient {
	return &tenvisClient{cc}
}

func (c *tenvisClient) StreamSCPMessages(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Tenvis_StreamSCPMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tenvis_serviceDesc.Streams[0], "/tenvis.Tenvis/StreamSCPMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &tenvisStreamSCPMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tenvis_StreamSCPMessagesClient interface {
	Recv() (*SCPMessages, error)
	grpc.ClientStream
}

type tenvisStreamSCPMessagesClient struct {
	grpc.ClientStream
}

func (x *tenvisStreamSCPMessagesClient) Recv() (*SCPMessages, error) {
	m := new(SCPMessages)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tenvisClient) GetLedger(ctx context.Context, in *GetLedgerRequest, opts ...grpc.CallOption) (*LedgerMessage, error) {
	out := new(LedgerMessage)
	err := c.cc.Invoke(ctx, "/tenvis.Tenvis/GetLedger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenvisClient) GetVoting(ctx context.Context, in *GetVotingRequest, opts ...grpc.CallOption) (*Voting, error) {
	out := new(Voting)
	err := c.cc.Invoke(ctx, "/tenvis.Tenvis/GetVoting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenvisClient) CreateVoting(ctx context.Context, in *CreateVotingOperation, opts ...grpc.CallOption) (*Voting, error) {
	out := new(Voting)
	err := c.cc.Invoke(ctx, "/tenvis.Tenvis/CreateVoting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenvisClient) Vote(ctx context.Context, in *VoteOperation, opts ...grpc.CallOption) (*Voting, error) {
	out := new(Voting)
	err := c.cc.Invoke(ctx, "/tenvis.Tenvis/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenvisServer is the server API for Tenvis service.
type TenvisServer interface {
	StreamSCPMessages(*empty.Empty, Tenvis_StreamSCPMessagesServer) error
	GetLedger(context.Context, *GetLedgerRequest) (*LedgerMessage, error)
	GetVoting(context.Context, *GetVotingRequest) (*Voting, error)
	CreateVoting(context.Context, *CreateVotingOperation) (*Voting, error)
	Vote(context.Context, *VoteOperation) (*Voting, error)
}

// UnimplementedTenvisServer can be embedded to have forward compatible implementations.
type UnimplementedTenvisServer struct {
}

func (*UnimplementedTenvisServer) StreamSCPMessages(req *empty.Empty, srv Tenvis_StreamSCPMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamSCPMessages not implemented")
}
func (*UnimplementedTenvisServer) GetLedger(ctx context.Context, req *GetLedgerRequest) (*LedgerMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedger not implemented")
}
func (*UnimplementedTenvisServer) GetVoting(ctx context.Context, req *GetVotingRequest) (*Voting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoting not implemented")
}
func (*UnimplementedTenvisServer) CreateVoting(ctx context.Context, req *CreateVotingOperation) (*Voting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVoting not implemented")
}
func (*UnimplementedTenvisServer) Vote(ctx context.Context, req *VoteOperation) (*Voting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}

func RegisterTenvisServer(s *grpc.Server, srv TenvisServer) {
	s.RegisterService(&_Tenvis_serviceDesc, srv)
}

func _Tenvis_StreamSCPMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TenvisServer).StreamSCPMessages(m, &tenvisStreamSCPMessagesServer{stream})
}

type Tenvis_StreamSCPMessagesServer interface {
	Send(*SCPMessages) error
	grpc.ServerStream
}

type tenvisStreamSCPMessagesServer struct {
	grpc.ServerStream
}

func (x *tenvisStreamSCPMessagesServer) Send(m *SCPMessages) error {
	return x.ServerStream.SendMsg(m)
}

func _Tenvis_GetLedger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenvisServer).GetLedger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenvis.Tenvis/GetLedger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenvisServer).GetLedger(ctx, req.(*GetLedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenvis_GetVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenvisServer).GetVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenvis.Tenvis/GetVoting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenvisServer).GetVoting(ctx, req.(*GetVotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenvis_CreateVoting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVotingOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenvisServer).CreateVoting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenvis.Tenvis/CreateVoting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenvisServer).CreateVoting(ctx, req.(*CreateVotingOperation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tenvis_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteOperation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenvisServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tenvis.Tenvis/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenvisServer).Vote(ctx, req.(*VoteOperation))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tenvis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tenvis.Tenvis",
	HandlerType: (*TenvisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLedger",
			Handler:    _Tenvis_GetLedger_Handler,
		},
		{
			MethodName: "GetVoting",
			Handler:    _Tenvis_GetVoting_Handler,
		},
		{
			MethodName: "CreateVoting",
			Handler:    _Tenvis_CreateVoting_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Tenvis_Vote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSCPMessages",
			Handler:       _Tenvis_StreamSCPMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tenvis.proto",
}
